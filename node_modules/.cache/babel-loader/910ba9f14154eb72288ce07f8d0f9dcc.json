{"ast":null,"code":"var _jsxFileName = \"D:\\\\git_hub\\\\react-minin\\\\react-quiz\\\\src\\\\containers\\\\QuizCreator\\\\QuizCreator.js\";\nimport React, { Component } from 'react';\nimport classes from './QuizCreator.module.css';\nimport Button from '../../components/UI/Button/Button';\nimport Input from '../../components/UI/Input/Input';\nimport { createControl, validate, validateForm } from '../../form/formFramework';\nimport Auxiliary from '../../hoc/Auxiliary/Auxiliary';\nimport Select from '../../components/UI/Select/Select';\n\nfunction createOptionControl(number) {\n  return createControl({\n    label: `Variant ${number}`,\n    errorMessage: 'Value can not be empty',\n    id: number\n  }, {\n    required: true\n  });\n}\n\nfunction createFormControls() {\n  return {\n    question: createControl({\n      label: 'Enter question',\n      errorMessage: 'Question can not be empty'\n    }, {\n      required: true\n    }),\n    option1: createOptionControl(1),\n    option2: createOptionControl(2),\n    option3: createOptionControl(3),\n    option4: createOptionControl(4)\n  };\n}\n\nexport default class QuizCreator extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      quiz: [],\n      isFormValid: false,\n      rightAnswerId: 1,\n      formControls: createFormControls()\n    };\n\n    this.sibmitHandler = event => {\n      event.preventDefault();\n    };\n\n    this.addQuestionHandler = event => {\n      event.preventDefault();\n      const quiz = this.state.quiz.concat();\n      const index = quiz.length + 1;\n      const {\n        question,\n        option1,\n        option2,\n        option3,\n        option4\n      } = this.state.formControls;\n      const questionItem = {\n        question: this.state.formControls.question.value,\n        id: index,\n        rightAnswerId: this.state.rightAnswerId,\n        answers: [{\n          text: option1.value,\n          id: option1.id\n        }, {\n          text: option1.value,\n          id: option1.id\n        }, {\n          text: option1.value,\n          id: option1.id\n        }, {\n          text: option1.value,\n          id: option1.id\n        }]\n      };\n    };\n\n    this.createQuizHandler = () => {};\n\n    this.changeHandler = (value, controlName) => {\n      const formControls = { ...this.state.formControls\n      };\n      const control = { ...formControls[controlName]\n      };\n      control.touched = true;\n      control.value = value;\n      control.valid = validate(control.value, control.validation);\n      formControls[controlName] = control;\n      this.setState({\n        formControls,\n        isFormValid: validateForm(formControls)\n      });\n    };\n\n    this.selectChangeHandler = event => {\n      this.setState({\n        rightAnswerId: +event.target.value\n      });\n    };\n  }\n\n  renderControls() {\n    return Object.keys(this.state.formControls).map((controlName, index) => {\n      const control = this.state.formControls[controlName];\n      return /*#__PURE__*/React.createElement(Auxiliary, {\n        key: controlName + index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Input, {\n        label: control.label,\n        value: control.value,\n        valid: control.valid,\n        shouldValidate: !!control.validation,\n        touched: control.touched,\n        errorMessage: control.errorMessage,\n        onChange: event => this.changeHandler(event.target.value, controlName),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }\n      }), index === 0 ? /*#__PURE__*/React.createElement(\"hr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 27\n        }\n      }) : null);\n    });\n  }\n\n  render() {\n    const select = /*#__PURE__*/React.createElement(Select, {\n      label: \"Choose correct answer\",\n      value: this.state.rightAnswerId,\n      onChange: this.selectChangeHandler,\n      options: [{\n        text: 1,\n        value: 1\n      }, {\n        text: 2,\n        value: 2\n      }, {\n        text: 3,\n        value: 3\n      }, {\n        text: 4,\n        value: 4\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 20\n      }\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.QuizCreator,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 11\n      }\n    }, \"Create quiz\"), /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.submitHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 11\n      }\n    }, this.renderControls(), select, /*#__PURE__*/React.createElement(Button, {\n      type: \"primary\",\n      onClick: this.addQuestionHandler,\n      disabled: !this.state.isFormValid,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 13\n      }\n    }, \"Add question\"), /*#__PURE__*/React.createElement(Button, {\n      type: \"success\",\n      onClick: this.createQuizHandler,\n      disabled: this.state.quiz.length === 0,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 13\n      }\n    }, \"Create quiz\"))));\n  }\n\n}","map":{"version":3,"sources":["D:/git_hub/react-minin/react-quiz/src/containers/QuizCreator/QuizCreator.js"],"names":["React","Component","classes","Button","Input","createControl","validate","validateForm","Auxiliary","Select","createOptionControl","number","label","errorMessage","id","required","createFormControls","question","option1","option2","option3","option4","QuizCreator","state","quiz","isFormValid","rightAnswerId","formControls","sibmitHandler","event","preventDefault","addQuestionHandler","concat","index","length","questionItem","value","answers","text","createQuizHandler","changeHandler","controlName","control","touched","valid","validation","setState","selectChangeHandler","target","renderControls","Object","keys","map","render","select","submitHandler"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\r\nimport classes from './QuizCreator.module.css'\r\nimport Button from '../../components/UI/Button/Button'\r\nimport Input from '../../components/UI/Input/Input'\r\nimport {createControl, validate, validateForm} from '../../form/formFramework'\r\nimport Auxiliary from '../../hoc/Auxiliary/Auxiliary'\r\nimport Select from '../../components/UI/Select/Select'\r\n\r\n\r\nfunction createOptionControl(number) {\r\n  return createControl({\r\n    label: `Variant ${number}`,\r\n    errorMessage: 'Value can not be empty',\r\n    id: number\r\n  }, {required: true})\r\n}\r\n\r\nfunction createFormControls() {\r\n  return {\r\n    question: createControl({\r\n      label: 'Enter question',\r\n      errorMessage: 'Question can not be empty'\r\n    }, {required: true}),\r\n    option1: createOptionControl(1),\r\n    option2: createOptionControl(2),\r\n    option3: createOptionControl(3),\r\n    option4: createOptionControl(4)\r\n  }\r\n}\r\n\r\nexport default class QuizCreator extends Component {\r\n\r\n  state = {\r\n    quiz: [],\r\n    isFormValid: false,\r\n    rightAnswerId: 1,\r\n    formControls: createFormControls()\r\n  }\r\n\r\n  sibmitHandler = event => {\r\n    event.preventDefault()\r\n  }\r\n\r\n  addQuestionHandler = event => {\r\n    event.preventDefault()\r\n\r\n    const quiz = this.state.quiz.concat()\r\n    const index = quiz.length + 1\r\n\r\n    const {question, option1, option2, option3, option4} = this.state.formControls\r\n\r\n    const questionItem = {\r\n      question: this.state.formControls.question.value,\r\n      id: index,\r\n      rightAnswerId: this.state.rightAnswerId,\r\n      answers: [\r\n        {text: option1.value, id: option1.id},\r\n        {text: option1.value, id: option1.id},\r\n        {text: option1.value, id: option1.id},\r\n        {text: option1.value, id: option1.id},\r\n      ]\r\n    }\r\n  }\r\n\r\n  createQuizHandler = () => {\r\n\r\n  }\r\n\r\n  changeHandler = (value, controlName) => {\r\n    const formControls = { ...this.state.formControls }\r\n    const control = { ...formControls[controlName] }\r\n\r\n    control.touched = true\r\n    control.value = value\r\n    control.valid = validate(control.value, control.validation)\r\n\r\n    formControls[controlName] = control\r\n\r\n    this.setState({\r\n      formControls,\r\n      isFormValid: validateForm(formControls)\r\n    })\r\n  }\r\n\r\n  renderControls() {\r\n    return Object.keys(this.state.formControls).map((controlName, index) => {\r\n      const control = this.state.formControls[controlName]\r\n\r\n      return (\r\n        <Auxiliary key={controlName + index}>\r\n          <Input\r\n            label={control.label}\r\n            value={control.value}\r\n            valid={control.valid}\r\n            shouldValidate={!!control.validation}\r\n            touched={control.touched}\r\n            errorMessage={control.errorMessage}\r\n            onChange={event => this.changeHandler(event.target.value, controlName)}\r\n          />\r\n          { index === 0 ? <hr /> : null }\r\n        </Auxiliary>\r\n      )\r\n    })\r\n  }\r\n\r\n  selectChangeHandler = event => {\r\n    this.setState({\r\n      rightAnswerId: +event.target.value\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const select = <Select \r\n      label=\"Choose correct answer\"\r\n      value={this.state.rightAnswerId}\r\n      onChange={this.selectChangeHandler}\r\n      options={[\r\n        {text: 1, value: 1},\r\n        {text: 2, value: 2},\r\n        {text: 3, value: 3},\r\n        {text: 4, value: 4}\r\n      ]}\r\n    />\r\n\r\n    return (\r\n      <div className={classes.QuizCreator}>\r\n        <div>\r\n          <h1>Create quiz</h1>\r\n\r\n          <form onSubmit={this.submitHandler}>\r\n\r\n            { this.renderControls() }\r\n\r\n            {select}\r\n\r\n            <Button\r\n              type=\"primary\"\r\n              onClick={this.addQuestionHandler}\r\n              disabled={!this.state.isFormValid}\r\n            >\r\n              Add question\r\n            </Button>\r\n\r\n            <Button\r\n              type=\"success\"\r\n              onClick={this.createQuizHandler}\r\n              disabled={this.state.quiz.length === 0}\r\n            >\r\n              Create quiz\r\n            </Button>\r\n\r\n          </form>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}